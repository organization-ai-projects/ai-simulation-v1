name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: simulation_ai
        ports:
          - 5432:5432

    steps:
      # Étape 1 : Récupérer le code
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Installer et tester le backend
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10
      - name: Install Backend Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r src/backend/requirements.txt
      - name: Run Backend Tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/simulation_ai
        run: |
          source venv/bin/activate
          cd src/backend
          pytest --cov=src

      # Étape 3 : Installer et tester le frontend
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: src/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-
      - name: Install Frontend Dependencies
        run: |
          cd src/frontend
          yarn install
      - name: Build and Test Frontend
        run: |
          cd src/frontend
          yarn build
          yarn test

  # Partie déploiement désactivée
  # deploy:
  #   needs: build-and-test
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Deploy using Docker Compose
  #       run: |
  #         docker-compose -f docker-compose.yml down
  #         docker-compose -f docker-compose.yml up -d --build
