# services:
#   backend:
#     build:
#       context: ./src/backend
#       dockerfile: docker/Dockerfile
#     container_name: backend_service
#     ports:
#       - "8000:8000"
#     volumes:
#       - ./src/backend:/app
#     env_file:
#       - .env
#     depends_on:
#       - db
#     networks:
#       - simulation_network

#   frontend:
#     build:
#       context: ./src/frontend
#       dockerfile: Dockerfile
#     container_name: frontend_service
#     ports:
#       - "3000:3000"
#     volumes:
#       - ./src/frontend:/app
#     networks:
#       - simulation_network

#   db:
#     image: postgres:13
#     container_name: db
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#       POSTGRES_DB: simulation_ai
#     ports:
#       - "5432:5432"
#     volumes:
#       - db_data:/var/lib/postgresql/data
#     networks:
#       - simulation_network

# volumes:
#   db_data:

# networks:
#   simulation_network:

# services:
#   backend:
#     build:
#       context: ./src/backend
#       dockerfile: docker/Dockerfile
#     container_name: backend_service
#     ports:
#       - "8000:8000"
#     volumes:
#       - ./src/backend:/app
#     env_file:
#       - .env
#     depends_on:
#       - db
#     networks:
#       - simulation_network
#     healthcheck:
#       test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
#       interval: 10s
#       timeout: 5s
#       retries: 3

#   frontend:
#     build:
#       context: ./src/frontend
#       dockerfile: Dockerfile
#     container_name: frontend_service
#     ports:
#       - "3000:3000"
#     volumes:
#       - ./src/frontend:/app
#     depends_on:
#       - backend
#     networks:
#       - simulation_network

#   db:
#     image: postgres:13
#     container_name: db
#     environment:
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: postgres
#       POSTGRES_DB: simulation_ai
#     ports:
#       - "5432:5432"
#     volumes:
#       - db_data:/var/lib/postgresql/data
#     networks:
#       - simulation_network
#     healthcheck:
#       test: ["CMD-SHELL", "pg_isready -U postgres"]
#       interval: 10s
#       timeout: 5s
#       retries: 3

# volumes:
#   db_data:

# networks:
#   simulation_network:

services:
  backend:
    build:
      context: ./src/backend
      dockerfile: docker/Dockerfile
    container_name: backend_service
    ports:
      - "8000:8000"
    volumes:
      - ./src/backend:/app:cached
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - simulation_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: frontend_service
    ports:
      - "3000:3000"
    volumes:
      - ./src/frontend:/app:cached
    depends_on:
      - backend
    networks:
      - simulation_network

  db:
    image: postgres:13
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: simulation_ai
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - simulation_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  tests-backend:
    build:
      context: ./src/backend
      dockerfile: docker/Dockerfile
      target: testing
    container_name: tests_backend
    command: ["pytest", "tests/"]
    volumes:
      - ./src/backend:/app
    env_file:
      - .env
    depends_on:
      - db
    networks:
      - simulation_network

  tests-frontend:
    build:
      context: ./src/frontend
      dockerfile: Dockerfile
    container_name: tests_frontend
    command: ["npm", "run", "test"]
    volumes:
      - ./src/frontend:/app
    depends_on:
      - frontend
    networks:
      - simulation_network

volumes:
  db_data:

networks:
  simulation_network:
